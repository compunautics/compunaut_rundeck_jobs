- defaultTab: output
  description: |-
    Use this job to issue a print order to the fleet.
    - This job will select printers according to filament registration.
    - This job will attempt to issue "how_many" orders to your printer fleet.
    - If there are not enough printers available with the filament, the job try to fulfill "how_many" orders for 48 hours, after which it times out.

    Caution!
    - Be _very_ careful when issuing multiple orders to the same filament category! You may accidentally set up order queues that compete for the same printer pool, creating conflicts.
    - Best practice is to issue print orders for a given filament_category one at a time until you exhaust your filament pool, and then wait until the last job is complete before issuing more.
  executionEnabled: true
  group: Workflow
  loglevel: INFO
  multipleExecutions: true
  name: 05 Issue Print Order by Filament
  nodeFilterEditable: false
  nodefilters:
    dispatch:
      excludePrecedence: true
      keepgoing: true
      rankOrder: ascending
      successOnEmptyNodeFilter: false
      threadcount: '1'
    filter: 'name: localhost'
  nodesSelectedByDefault: true
  options:
  - description: |-
      Input the gcode files' filament category.
      - Use the format ${color}_${filament}.
      - This setting will later be used to register filaments on printers.
    enforced: true
    name: filament_category
    required: true
    valuesUrl: http://localhost:8080/get_dir_contents.py?dir=/var/rundeck/projects/Print_Ops/gcodes/
  - description: |-
      Input the gcode files' client category.
      - This category exists to classify gcodes according to client.
    enforced: true
    name: client_category
    required: true
    valuesUrl: http://localhost:8080/get_dir_contents.py?dir=/var/rundeck/projects/Print_Ops/gcodes/${option.filament_category.value}
  - description: |-
      Input the gcode files' sub category.
      - This category exists for any arbitrary sub classification you may wish to use.
    enforced: true
    name: sub_category
    required: true
    valuesUrl: http://localhost:8080/get_dir_contents.py?dir=/var/rundeck/projects/Print_Ops/gcodes/${option.filament_category.value}/${option.client_category.value}
  - description: Input the gcode file to delete.
    enforced: true
    name: gcode_file
    required: true
    valuesUrl: http://localhost:8080/get_dir_contents.py?dir=/var/rundeck/projects/Print_Ops/gcodes/${option.filament_category.value}/${option.client_category.value}/${option.sub_category.value}
  - description: Input how many of this print you would like.
    name: how_many
    regex: \d+
    required: true
  - description: The octoprint API key. **DO NOT CHANGE THIS VALUE**
    name: apikey
    required: true
    secure: true
    storagePath: keys/octoprint/api_key
    valueExposed: true
  - description: The default rundeck username. **DO NOT CHANGE THIS VALUE**
    name: rundeck_username
    required: true
    secure: true
    storagePath: keys/rundeck/top_user
    valueExposed: true
  - description: The default rundeck password. **DO NOT CHANGE THIS VALUE**
    name: rundeck_password
    required: true
    secure: true
    storagePath: keys/rundeck/top_password
    valueExposed: true
  scheduleEnabled: true
  sequence:
    commands:
    - description: Issue Print Order
      interpreterArgsQuoted: false
      script: "#!/usr/bin/python\n# IMPORT MODULES\nimport subprocess\nimport requests\n\
        import json\nimport time\nimport random\n\n# DEFINE VARS\napi_key = '@option.apikey@'\n\
        rundeck_username = '@option.rundeck_username@'\nrundeck_password = '@option.rundeck_password@'\n\
        gcode_dir = '/var/rundeck/projects/Print_Ops/gcodes/'\nfilament_category =\
        \ '@option.filament_category@' \nclient_category = '@option.client_category@'\
        \ \nsub_category = '@option.sub_category@' \ngcode_file = '@option.gcode_file@'\n\
        gcode_path = gcode_dir+filament_category+\"/\"+client_category+\"/\"+sub_category+\"\
        /\"+gcode_file\nhow_many = @option.how_many@\n\nprinter_list = []\n\n# GET\
        \ AVAILABLE PRINTERS\ndef get_available_printers():\n  try:\n    command =\
        \ \"for ip in `host filament_\"+filament_category+\".service.consul | awk\
        \ '{print $4}'`; do consul catalog nodes | grep ${ip} | awk '{print $1}';\
        \ done\"\n    process = subprocess.Popen(command, shell=True, executable='/bin/bash',\
        \ stdout=subprocess.PIPE)\n    output,error = process.communicate()\n    printers\
        \ = output.splitlines()\n    return printers\n  except Exception as e:\n \
        \   print e\n\n# ISSUE JOBS\nwhile how_many > 0:\n  try:\n    # output num\
        \ remaining\n    print \"We have \"+str(how_many)+\" print orders to issue.\"\
        \n\n    # get available printers\n    printer_list = get_available_printers()\n\
        \n    # what if not enough?\n    if len(printer_list) < 1:\n      while len(printer_list)\
        \ < 1:\n        print \"There are no available printers. Waiting 3 minutes\
        \ and checking again.\"\n        time.sleep(180)\n        printer_list = get_available_printers()\n\
        \    else:\n      print \"We found \"+str(len(printer_list))+\" available\
        \ printers.\"\n\n    # select printer\n    printer = random.choice(printer_list)\n\
        \    print \"Selecting \"+printer\n\n    # mark printer unavailable\n    session\
        \ = requests.Session()\n    session.params.update({'format':'json'})\n   \
        \ r = session.post(\"http://localhost:4440/j_security_check\", data={'j_username':rundeck_username,'j_password':rundeck_password})\n\
        \    r = session.get(\"http://localhost:4440/api/14/project/Print_Ops/jobs\"\
        )\n    jobs = r.json()\n\n    for job in jobs:\n      if 'Mark Filament Unavailable'\
        \ in job['name']:\n        job_id = job['id']\n\n    session.params.update({'format':'xml'})\n\
        \    r =  session.post(\"http://localhost:4440/api/1/job/\"+job_id+\"/run\"\
        , data={'filter':printer})\n    print \"Marking \"+printer+\" unavailable:\
        \ \"+str(r.status_code)\n      \n    # define vars\n    headers={\"X-Api-Key\"\
        : api_key}\n    files={'file': (gcode_file, open(gcode_path, 'rb'))}\n   \
        \ data=[('select','true'),('print','true')]\n    url=\"http://\"+printer+\"\
        :5000/api/files/local\"\n\n    # send api call\n    print \"Issuing print\
        \ to \"+printer\n    r = requests.post(url, headers=headers, files=files,\
        \ data=data)\n    print \"Printer returned: \"+str(r.status_code)\n\n    #\
        \ decrement\n    how_many = how_many - 1\n    time.sleep(15)\n\n  except Exception\
        \ as e:\n    print e"
      scriptInterpreter: sudo python <
    keepgoing: true
    strategy: node-first
  timeout: 48h

