- defaultTab: output
  description: Use this job to heat the printer.
  executionEnabled: true
  group: Components/Temperature
  loglevel: INFO
  multipleExecutions: true
  name: Heat Printer
  nodeFilterEditable: false
  nodefilters:
    dispatch:
      excludePrecedence: true
      keepgoing: false
      rankOrder: ascending
      successOnEmptyNodeFilter: false
      threadcount: '8'
    filter: 'tags: octoprint_printer'
  nodesSelectedByDefault: false
  options:
  - description: Set the head temperature.
    name: head_temp
    regex: \d+
    required: true
    value: '220'
  - description: Set the bed temperature.
    name: bed_temp
    regex: \d+
    required: true
    value: '50'
  - description: The octoprint API key. **DO NOT CHANGE THIS VALUE**
    name: apikey
    required: true
    secure: true
    storagePath: keys/octoprint/api_key
    valueExposed: true
  scheduleEnabled: true
  sequence:
    commands:
    - description: Heat the print head
      interpreterArgsQuoted: false
      script: |-
        #!/usr/bin/python

        import requests
        import json

        headers = {"X-Api-Key":"@option.apikey@","Content-Type":"application/json"}
        payload = {"command":"target","targets":{"tool0":@option.head_temp@}}
        url = "http://127.0.0.1:5000/api/printer/tool"

        r = requests.post(url, headers=headers, data=json.dumps(payload))

        print "Printer returned:"
        print r.status_code
      scriptInterpreter: sudo /usr/bin/python <
    - description: Heat the print bed
      interpreterArgsQuoted: false
      script: |-
        #!/usr/bin/python

        import requests
        import json

        headers = {"X-Api-Key":"@option.apikey@","Content-Type":"application/json"}
        payload = {"command":"target","target":@option.bed_temp@}
        url = "http://127.0.0.1:5000/api/printer/bed"

        r = requests.post(url, headers=headers, data=json.dumps(payload))

        print "Printer returned:"
        print r.status_code
      scriptInterpreter: sudo /usr/bin/python <
    keepgoing: false
    strategy: node-first
  timeout: '300'

